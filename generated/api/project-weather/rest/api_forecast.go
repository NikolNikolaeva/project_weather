// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Weather API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package modules

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ForecastAPIController binds http requests to an api service and writes the service results to the http response
type ForecastAPIController struct {
	service      ForecastAPIServicer
	errorHandler ErrorHandler
}

// ForecastAPIOption for how the controller is set up.
type ForecastAPIOption func(*ForecastAPIController)

// WithForecastAPIErrorHandler inject ErrorHandler into controller
func WithForecastAPIErrorHandler(h ErrorHandler) ForecastAPIOption {
	return func(c *ForecastAPIController) {
		c.errorHandler = h
	}
}

// NewForecastAPIController creates a default api controller
func NewForecastAPIController(s ForecastAPIServicer, opts ...ForecastAPIOption) *ForecastAPIController {
	controller := &ForecastAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ForecastAPIController
func (c *ForecastAPIController) Routes() Routes {
	return Routes{
		"CreateForecast": Route{
			strings.ToUpper("Post"),
			"/api/forecasts",
			c.CreateForecast,
		},
		"DeleteForecastById": Route{
			strings.ToUpper("Delete"),
			"/api/forecasts/{id}",
			c.DeleteForecastById,
		},
		"GetAllForecasts": Route{
			strings.ToUpper("Get"),
			"/api/forecasts",
			c.GetAllForecasts,
		},
		"GetForecastById": Route{
			strings.ToUpper("Get"),
			"/api/forecasts/{id}",
			c.GetForecastById,
		},
		"UpdateForecast": Route{
			strings.ToUpper("Put"),
			"/api/forecasts/{id}",
			c.UpdateForecast,
		},
	}
}

// CreateForecast -
func (c *ForecastAPIController) CreateForecast(w http.ResponseWriter, r *http.Request) {
	forecastParam := Forecast{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&forecastParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertForecastRequired(forecastParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertForecastConstraints(forecastParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateForecast(r.Context(), forecastParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteForecastById -
func (c *ForecastAPIController) DeleteForecastById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.DeleteForecastById(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllForecasts -
func (c *ForecastAPIController) GetAllForecasts(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllForecasts(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetForecastById -
func (c *ForecastAPIController) GetForecastById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetForecastById(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateForecast -
func (c *ForecastAPIController) UpdateForecast(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	forecastParam := Forecast{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&forecastParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertForecastRequired(forecastParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertForecastConstraints(forecastParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateForecast(r.Context(), idParam, forecastParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
