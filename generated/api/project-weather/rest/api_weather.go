// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Weather API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package modules

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// WeatherAPIController binds http requests to an api service and writes the service results to the http response
type WeatherAPIController struct {
	service      WeatherAPIServicer
	errorHandler ErrorHandler
}

// WeatherAPIOption for how the controller is set up.
type WeatherAPIOption func(*WeatherAPIController)

// WithWeatherAPIErrorHandler inject ErrorHandler into controller
func WithWeatherAPIErrorHandler(h ErrorHandler) WeatherAPIOption {
	return func(c *WeatherAPIController) {
		c.errorHandler = h
	}
}

// NewWeatherAPIController creates a default api controller
func NewWeatherAPIController(s WeatherAPIServicer, opts ...WeatherAPIOption) *WeatherAPIController {
	controller := &WeatherAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the WeatherAPIController
func (c *WeatherAPIController) Routes() Routes {
	return Routes{
		"GetWeatherByCity": Route{
			strings.ToUpper("Get"),
			"/api/weather/{city}/{period}",
			c.GetWeatherByCity,
		},
	}
}

// GetWeatherByCity -
func (c *WeatherAPIController) GetWeatherByCity(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	cityParam := params["city"]
	if cityParam == "" {
		c.errorHandler(w, r, &RequiredError{"city"}, nil)
		return
	}
	periodParam := params["period"]
	if periodParam == "" {
		c.errorHandler(w, r, &RequiredError{"period"}, nil)
		return
	}
	result, err := c.service.GetWeatherByCity(r.Context(), cityParam, periodParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
