// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Weather API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package modules

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CityAPIController binds http requests to an api service and writes the service results to the http response
type CityAPIController struct {
	service      CityAPIServicer
	errorHandler ErrorHandler
}

// CityAPIOption for how the controller is set up.
type CityAPIOption func(*CityAPIController)

// WithCityAPIErrorHandler inject ErrorHandler into controller
func WithCityAPIErrorHandler(h ErrorHandler) CityAPIOption {
	return func(c *CityAPIController) {
		c.errorHandler = h
	}
}

// NewCityAPIController creates a default api controller
func NewCityAPIController(s CityAPIServicer, opts ...CityAPIOption) *CityAPIController {
	controller := &CityAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CityAPIController
func (c *CityAPIController) Routes() Routes {
	return Routes{
		"DeleteById": Route{
			strings.ToUpper("Delete"),
			"/api/cities/{id}",
			c.DeleteById,
		},
		"GetAll": Route{
			strings.ToUpper("Get"),
			"/api/cities",
			c.GetAll,
		},
		"GetById": Route{
			strings.ToUpper("Get"),
			"/api/cities/{id}",
			c.GetById,
		},
		"Register": Route{
			strings.ToUpper("Post"),
			"/api/cities",
			c.Register,
		},
		"UpdateByID": Route{
			strings.ToUpper("Put"),
			"/api/cities/{id}",
			c.UpdateByID,
		},
	}
}

// DeleteById -
func (c *CityAPIController) DeleteById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.DeleteById(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAll -
func (c *CityAPIController) GetAll(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAll(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetById -
func (c *CityAPIController) GetById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetById(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// Register -
func (c *CityAPIController) Register(w http.ResponseWriter, r *http.Request) {
	cityParam := City{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&cityParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCityRequired(cityParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCityConstraints(cityParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Register(r.Context(), cityParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateByID -
func (c *CityAPIController) UpdateByID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	cityParam := City{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&cityParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCityRequired(cityParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCityConstraints(cityParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateByID(r.Context(), idParam, cityParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
