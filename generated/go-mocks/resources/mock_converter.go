// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NikolNikolaeva/project_weather/resources (interfaces: ConverterI)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination ../generated/go-mocks/resources/mock_converter.go . ConverterI
//

// Package mock_resources is a generated GoMock package.
package mock_resources

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	modules "github.com/NikolNikolaeva/project_weather/generated/api/project-weather/rest"
	model "github.com/NikolNikolaeva/project_weather/generated/dao/model"
)

// MockConverterI is a mock of ConverterI interface.
type MockConverterI struct {
	ctrl     *gomock.Controller
	recorder *MockConverterIMockRecorder
}

// MockConverterIMockRecorder is the mock recorder for MockConverterI.
type MockConverterIMockRecorder struct {
	mock *MockConverterI
}

// NewMockConverterI creates a new mock instance.
func NewMockConverterI(ctrl *gomock.Controller) *MockConverterI {
	mock := &MockConverterI{ctrl: ctrl}
	mock.recorder = &MockConverterIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConverterI) EXPECT() *MockConverterIMockRecorder {
	return m.recorder
}

// ConvertApiCityToModelCity mocks base method.
func (m *MockConverterI) ConvertApiCityToModelCity(arg0 *modules.City) *model.City {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertApiCityToModelCity", arg0)
	ret0, _ := ret[0].(*model.City)
	return ret0
}

// ConvertApiCityToModelCity indicates an expected call of ConvertApiCityToModelCity.
func (mr *MockConverterIMockRecorder) ConvertApiCityToModelCity(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertApiCityToModelCity", reflect.TypeOf((*MockConverterI)(nil).ConvertApiCityToModelCity), arg0)
}

// ConvertApiForecastToModelForecast mocks base method.
func (m *MockConverterI) ConvertApiForecastToModelForecast(arg0 *modules.Forecast) *model.Forecast {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertApiForecastToModelForecast", arg0)
	ret0, _ := ret[0].(*model.Forecast)
	return ret0
}

// ConvertApiForecastToModelForecast indicates an expected call of ConvertApiForecastToModelForecast.
func (mr *MockConverterIMockRecorder) ConvertApiForecastToModelForecast(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertApiForecastToModelForecast", reflect.TypeOf((*MockConverterI)(nil).ConvertApiForecastToModelForecast), arg0)
}

// ConvertModelCityToApiCity mocks base method.
func (m *MockConverterI) ConvertModelCityToApiCity(arg0 *model.City) *modules.City {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertModelCityToApiCity", arg0)
	ret0, _ := ret[0].(*modules.City)
	return ret0
}

// ConvertModelCityToApiCity indicates an expected call of ConvertModelCityToApiCity.
func (mr *MockConverterIMockRecorder) ConvertModelCityToApiCity(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertModelCityToApiCity", reflect.TypeOf((*MockConverterI)(nil).ConvertModelCityToApiCity), arg0)
}

// ConvertModelForecastToApiForecast mocks base method.
func (m *MockConverterI) ConvertModelForecastToApiForecast(arg0 *model.Forecast) *modules.Forecast {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertModelForecastToApiForecast", arg0)
	ret0, _ := ret[0].(*modules.Forecast)
	return ret0
}

// ConvertModelForecastToApiForecast indicates an expected call of ConvertModelForecastToApiForecast.
func (mr *MockConverterIMockRecorder) ConvertModelForecastToApiForecast(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertModelForecastToApiForecast", reflect.TypeOf((*MockConverterI)(nil).ConvertModelForecastToApiForecast), arg0)
}
