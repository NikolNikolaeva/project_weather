// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NikolNikolaeva/project_weather/services (interfaces: WeatherAPIClient)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination ../generated/go-mocks/services/mock_weather_handler.go . WeatherAPIClient
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	weatherapi "github.com/NikolNikolaeva/project_weather/generated/api/weatherapi"
)

// MockWeatherAPIClient is a mock of WeatherAPIClient interface.
type MockWeatherAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherAPIClientMockRecorder
}

// MockWeatherAPIClientMockRecorder is the mock recorder for MockWeatherAPIClient.
type MockWeatherAPIClientMockRecorder struct {
	mock *MockWeatherAPIClient
}

// NewMockWeatherAPIClient creates a new mock instance.
func NewMockWeatherAPIClient(ctrl *gomock.Controller) *MockWeatherAPIClient {
	mock := &MockWeatherAPIClient{ctrl: ctrl}
	mock.recorder = &MockWeatherAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherAPIClient) EXPECT() *MockWeatherAPIClientMockRecorder {
	return m.recorder
}

// HandleCityData mocks base method.
func (m *MockWeatherAPIClient) HandleCityData(arg0, arg1 string) *weatherapi.Location {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCityData", arg0, arg1)
	ret0, _ := ret[0].(*weatherapi.Location)
	return ret0
}

// HandleCityData indicates an expected call of HandleCityData.
func (mr *MockWeatherAPIClientMockRecorder) HandleCityData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCityData", reflect.TypeOf((*MockWeatherAPIClient)(nil).HandleCityData), arg0, arg1)
}

// HandleCurrantData mocks base method.
func (m *MockWeatherAPIClient) HandleCurrantData(arg0, arg1 string) (*weatherapi.Current, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCurrantData", arg0, arg1)
	ret0, _ := ret[0].(*weatherapi.Current)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleCurrantData indicates an expected call of HandleCurrantData.
func (mr *MockWeatherAPIClientMockRecorder) HandleCurrantData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCurrantData", reflect.TypeOf((*MockWeatherAPIClient)(nil).HandleCurrantData), arg0, arg1)
}

// HandleForecast mocks base method.
func (m *MockWeatherAPIClient) HandleForecast(arg0 string, arg1 int32, arg2 string) (*weatherapi.Forecast, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleForecast", arg0, arg1, arg2)
	ret0, _ := ret[0].(*weatherapi.Forecast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleForecast indicates an expected call of HandleForecast.
func (mr *MockWeatherAPIClientMockRecorder) HandleForecast(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleForecast", reflect.TypeOf((*MockWeatherAPIClient)(nil).HandleForecast), arg0, arg1, arg2)
}
